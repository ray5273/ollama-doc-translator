name: Translate Korean Docs to English

on:
  push:
    branches: [ master, main ]
    paths:
      - 'docs/**/*.md'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'docs/**/*.md'
  workflow_dispatch:

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests python-markdown

    - name: Setup Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull exaone3.5:7.8b

    - name: Create translation script
      run: |
        cat > translate.py << 'EOF'
        import os
        import json
        import requests
        import time
        from pathlib import Path

        def translate_with_ollama(text, model="exaone3.5:7.8b"):
            url = "http://localhost:11434/api/generate"
            
            prompt = f"""Please translate the following Korean text to English. Maintain the markdown formatting and structure. Only return the translated text without any additional comments or explanations.

        Korean text:
        {text}

        English translation:"""
            
            payload = {
                "model": model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.3,
                    "top_p": 0.9
                }
            }
            
            try:
                response = requests.post(url, json=payload, timeout=300)
                response.raise_for_status()
                result = response.json()
                return result.get('response', '').strip()
            except Exception as e:
                print(f"Translation error: {e}")
                return text

        def process_markdown_file(input_path, output_path):
            print(f"Translating: {input_path} -> {output_path}")
            
            with open(input_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Split content into chunks to handle large files
            chunks = content.split('\n\n')
            translated_chunks = []
            
            for i, chunk in enumerate(chunks):
                if chunk.strip():
                    print(f"Translating chunk {i+1}/{len(chunks)}")
                    translated_chunk = translate_with_ollama(chunk)
                    translated_chunks.append(translated_chunk)
                    time.sleep(1)  # Rate limiting
                else:
                    translated_chunks.append(chunk)
            
            translated_content = '\n\n'.join(translated_chunks)
            
            # Create output directory
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write translated content
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(translated_content)
            
            print(f"Translation completed: {output_path}")

        def main():
            docs_dir = Path('docs')
            docs_en_dir = Path('docs-en')
            
            if not docs_dir.exists():
                print("docs/ directory not found")
                return
            
            # Find all markdown files in docs/
            md_files = list(docs_dir.rglob('*.md'))
            
            if not md_files:
                print("No markdown files found in docs/")
                return
            
            print(f"Found {len(md_files)} markdown files to translate")
            
            for md_file in md_files:
                # Calculate relative path
                rel_path = md_file.relative_to(docs_dir)
                output_file = docs_en_dir / rel_path
                
                # Skip if already exists and is newer
                if output_file.exists() and output_file.stat().st_mtime > md_file.stat().st_mtime:
                    print(f"Skipping {md_file} (translation is up to date)")
                    continue
                
                process_markdown_file(md_file, output_file)

        if __name__ == "__main__":
            main()
        EOF

    - name: Run translation
      run: python translate.py

    - name: Check for changes
      id: check_changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain docs-en/)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          git add docs-en/
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.check_changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: Update English translations"
        title: "Update English documentation translations"
        body: |
          ## üìù Documentation Translation Update
          
          This PR contains automatically generated English translations of Korean documentation files.
          
          ### Changes
          - Translated Korean markdown files from `docs/` to `docs-en/`
          - Used Exaone3.5:7.8b model for translation
          
          ### Files Updated
          ```
          $(git diff --name-only HEAD^ HEAD docs-en/ || echo "New translations added")
          ```
          
          Please review the translations for accuracy and merge if they look good.
          
          ---
          ü§ñ This PR was automatically generated by the translation workflow.
        branch: translation-update-${{ github.run_number }}
        delete-branch: true