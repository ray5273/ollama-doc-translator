name: 'Ollama Korean to English Translator'
description: 'Translate Korean markdown documents to English using local Ollama API with Exaone3.5 model'
author: 'Your Name'

branding:
  icon: 'globe'
  color: 'blue'

inputs:
  ollama-url:
    description: 'Ollama API URL'
    required: false
    default: 'http://localhost:11434'
  
  model:
    description: 'Ollama model to use for translation'
    required: false
    default: 'exaone3.5:7.8b'

  context-length:
    description: 'Model context length for smart chunking. Larger values allow bigger chunks but require more memory. Set to 0 to disable chunking entirely.'
    required: false
    default: '32768'
  
  source-dir:
    description: 'Source directory containing Korean markdown files'
    required: false
    default: 'docs'
  
  target-dir:
    description: 'Target directory for English translations'
    required: false
    default: 'docs-en'
  
  file-pattern:
    description: 'File pattern to match (glob)'
    required: false
    default: '**/*.md'
  
  specific-files:
    description: 'Specific files to translate (comma-separated list, overrides file-pattern if provided). Example: "docs/file1.md,docs/file2.md"'
    required: false
    default: ''
  
  commit-message:
    description: 'Commit message for translated files'
    required: false
    default: 'docs: Update English translations'
  
  create-pr:
    description: 'Create pull request with translations'
    required: false
    default: 'true'
  
  pr-title:
    description: 'Pull request title'
    required: false
    default: 'Update English documentation translations'
  
  pr-branch:
    description: 'Branch name for pull request'
    required: false
    default: 'translation-update'
  
  github-token:
    description: 'GitHub token for creating PR'
    required: false
    default: ${{ github.token }}
  
  base-branch:
    description: 'Base branch for pull request'
    required: false
    default: 'main'
  
  github-api-url:
    description: 'GitHub API URL (for GitHub Enterprise)'
    required: false
    default: 'https://api.github.com'
  
  skip-existing:
    description: 'Skip translation of files that already exist and are newer than the source file (based on modification time)'
    required: false
    default: 'true'
  
  temperature:
    description: 'Model temperature (0.0-1.0). Lower values (0.1) produce more consistent translations, higher values (0.7) more creative but potentially inconsistent results.'
    required: false
    default: '0.3'
  
  max-retries:
    description: 'Maximum number of retries for failed API calls before falling back to original text'
    required: false
    default: '3'
  
  ssl-verify:
    description: 'Enable SSL certificate verification'
    required: false
    default: 'true'
  
  debug-mode:
    description: 'Enable debug mode to generate detailed chunking analysis and comparison files (debug_chunks/, debug_originals/, debug_translations/)'
    required: false
    default: 'false'

outputs:
  translated-files:
    description: 'Number of files translated'
  
  skipped-files:
    description: 'Number of files skipped'
  
  pr-url:
    description: 'Pull request URL if created'
  
  pr-number:
    description: 'Pull request number if created'
  
  translated-files-list:
    description: 'List of translated files (newline-separated)'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Check Ollama availability
      shell: bash
      run: |
        echo "üîç Checking Ollama server at ${{ inputs.ollama-url }}"
        
        # Check if Ollama server is running
        if ! curl -s "${{ inputs.ollama-url }}/api/tags" > /dev/null; then
          echo "‚ùå Ollama server is not accessible at ${{ inputs.ollama-url }}"
          echo "Please ensure:"
          echo "1. Ollama is installed and running"
          echo "2. Server is accessible at the specified URL"
          exit 1
        fi
        
        echo "‚úÖ Ollama server is accessible"
        
        # Check if model is available
        if ! curl -s "${{ inputs.ollama-url }}/api/tags" | grep -q "${{ inputs.model }}"; then
          echo "‚ö†Ô∏è Model ${{ inputs.model }} not found, attempting to pull..."
          if command -v ollama >/dev/null 2>&1; then
            ollama pull "${{ inputs.model }}"
          else
            echo "‚ùå Ollama CLI not available. Please pull model manually: ollama pull ${{ inputs.model }}"
            exit 1
          fi
        fi
        
        echo "‚úÖ Model ${{ inputs.model }} is available"
    
    - name: Run translation
      shell: bash
      env:
        INPUT_OLLAMA_URL: ${{ inputs.ollama-url }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_SOURCE_DIR: ${{ inputs.source-dir }}
        INPUT_TARGET_DIR: ${{ inputs.target-dir }}
        INPUT_FILE_PATTERN: ${{ inputs.file-pattern }}
        INPUT_SPECIFIC_FILES: ${{ inputs.specific-files }}
        INPUT_COMMIT_MESSAGE: ${{ inputs.commit-message }}
        INPUT_CREATE_PR: ${{ inputs.create-pr }}
        INPUT_PR_TITLE: ${{ inputs.pr-title }}
        INPUT_PR_BRANCH: ${{ inputs.pr-branch }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_BASE_BRANCH: ${{ inputs.base-branch }}
        INPUT_GITHUB_API_URL: ${{ inputs.github-api-url }}
        INPUT_SKIP_EXISTING: ${{ inputs.skip-existing }}
        INPUT_TEMPERATURE: ${{ inputs.temperature }}
        INPUT_MAX_RETRIES: ${{ inputs.max-retries }}
        INPUT_SSL_VERIFY: ${{ inputs.ssl-verify }}
        INPUT_CONTEXT_LENGTH: ${{ inputs.context-length }}
        INPUT_DEBUG_MODE: ${{ inputs.debug-mode }}
      run: |
        python "${{ github.action_path }}/entrypoint.py"